<krpano>

	<action name="skin_setup">
		tween(layer[main-skin-con].alpha, 1); 
		delayedcall(0.5,  
			tween(hotspot[region].alpha, 1, 2);   
		);
		set(control.usercontrol, all); 
	</action>

	<action name="do_crop_animation">
		registerattribute(xframes, calc((imagewidth / %1) BOR 0));
		registerattribute(yframes, calc((imageheight / %2) BOR 0));
		registerattribute(frames, calc(xframes * yframes));
		registerattribute(frame_num, 0);

		set(crop, '0|0|%1|%2');

		setinterval(calc('crop_anim_' + name), calc(1.0 / %3),
			if(loaded,
				inc(frame_num);
				if(frame_num GE frames, if(onlastframe !== null, onlastframe() ); set(frame_num,0); );
				mod(xpos, frame_num, xframes);
				div(ypos, frame_num, xframes);
				Math.floor(ypos);
				mul(xpos, %1);
				mul(ypos, %2);
				calc(crop, xpos + '|' + ypos + '|%1|%2');
			  ,
				clearinterval(calc('crop_anim_' + name));
			  );
		  );
	</action>

	<events  name="msdn"  onmousedown="stoplookto();"   keep="true"  />		
	<events name="skin_events" keep="true"
	        onxmlcomplete="skin_startup_custom();"
	        onnewpano="skin_update_scene_infos(); new_scene_update(); skin_deeplinking_update_url(); "
	        onremovepano=""
	        onloadcomplete=""
	        onidle="skin_deeplinking_update_url();"
	        onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        onkeydown="skin_keydown_event();"
	        />
	
	<style name="skin_hotspotstyle" url="vtourskin_hotspot_round.png" scale="0.5" edge="center" distorted="false" alpha="0" enabled="false"
	       tooltip=""
	       linkedscene=""
	       linkedscene_lookat=""
	       onclick="skin_hotspotstyle_clicked(); 
	       tween(layer[tooltip_hs].alpha,0,.5);"
	       onover="set(layer[tooltip_hs].html, get(scene[get(linkedscene)].title)); 
	       calc_layer_pos(get(name)); 
	       tween(layer[tooltip_hs].alpha,1,.5); 
	       subtxt(spot_id, get(name), 4, 2); 
	       txtadd(anim-hs,'spot_anim_', get(scene[get(linkedscene)].index));   txtadd(back-hs,'spot_back_', get(scene[get(linkedscene)].index)); 
	       set(hotspot[get(back-hs)].ath,get(ath));  
	       set(hotspot[get(back-hs)].atv,get(atv));  
	       set(hotspot[get(back-hs)].visible,true);  
	       tween(scale,2); 
	       tween(alpha,0); 
	       tween(hotspot[get(back-hs)].scale,.4); 
	       tween(hotspot[get(back-hs)].alpha,1); 
	       tween(hotspot[get(anim-hs)].scale,4); 
	       set(hotspot[get(anim-hs)].visible,false); 
	       tween(hotspot[get(anim-hs)].alpha,0);"
	       onout="tween(layer[tooltip_hs].alpha,0,.5);  
	       tween(scale,0.5); 
	       tween(alpha,1); 
	       tween(hotspot[get(back-hs)].scale,.1); 
	       tween(hotspot[get(back-hs)].alpha,0); 
	       tween(hotspot[get(anim-hs)].scale,1); 
	       set(hotspot[get(anim-hs)].visible,true); 
	       set(hotspot[get(anim-hs)].alpha,0); "
	       onloaded=" delayedcall(get(skin_settings.hs_anim_delay),tween(alpha,1,1,linear,set(enabled,true);); 
	       set(skin_settings.hs_anim_delay,get(skin_settings.hs_delay));); 
	       subtxt(spot_id, get(name), 4, 2); 
	       txtadd(anim-hs,'spot_anim_', get(scene[get(linkedscene)].index));  
	       set(hotspot[get(anim-hs)].ath,get(ath));
	       set(hotspot[get(anim-hs)].atv,get(atv));
	       set(hotspot[get(anim-hs)].visible,true);
	       if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); 
	       loadstyle(skin_tooltips); );"
	       />

		   <style name="skin_hotspotstyle_multi" url="custom/vtourskin_hotspot_multi.png" openstate="0" active="1" scale="0.5" edge="center" distorted="false" alpha="0" enabled="false"
	       tooltip=""
	       linkedscene=""
	       linkedscene_lookat=""
	       onclick="skin_hotspotstyle_clicked(); tween(layer[tooltip_hs].alpha,0,.5); set(openstate,1);"
	       onover="set(layer[tooltip_hs].html, get(scene[get(linkedscene)].title)); calc_layer_pos(get(name)); tween(layer[tooltip_hs].alpha,1,.5); subtxt(mspot_id, get(name), 5, 2); trace(get(mspot_id)); txtadd(manim-hs,'mspot_anim_', get(mspot_id));      tween(scale,1); tween(alpha,1);   tween(hotspot[get(manim-hs)].scale,2); tween(hotspot[get(manim-hs)].alpha,0);"
	       onout="tween(layer[tooltip_hs].alpha,0,.5);  tween(scale,0.5); tween(alpha,1);  tween(hotspot[get(manim-hs)].scale,1); tween(hotspot[get(manim-hs)].alpha,0); "
	       onloaded=" delayedcall(get(skin_settings.hs_anim_delay),tween(alpha,1,1,linear,set(enabled,true);); set(skin_settings.hs_anim_delay,get(skin_settings.hs_delay));); subtxt(mspot_id, get(name), 5, 2); trace(get(mspot_id));  txtadd(manim-hs,'mspot_anim_', get(mspot_id));     set(hotspot[get(manim-hs)].visible,true);  if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       />
		   
		   
	<style name="skin_hotspot_anim" url="new-hotspot.png" keep="false" visible="false" alpha="0" scale="1" width="40" height="40" edge="center" distorted="false" enabled="false" zorder="-1"

		   onloadedx="set(alpha, 0); delayedcall(get(skin_settings.hs_delay),tween(alpha,1,1);); set(animated, 1); hotspot_animatex(); "       crop="0|0|100|100"           framewidth="100" frameheight="100" frame="1" lastframe="68" 
		   onloaded="set(alpha, 0); delayedcall(get(skin_settings.hs_anim_delay),tween(alpha,0,1,linear, hs-anim(); ); set(skin_settings.hs_anim_delay,get(skin_settings.hs_delay));); " 

		   xonloaded=" set(alpha, 0); delayedcall(get(skin_settings.hs_delay),tween(alpha,1,1););   do_crop_animation(100,100 68);"
		   />
		   

		   	      
	<style name="skin_hotspot_round" keep="true"  visible="false" alpha="0" enabled="false" scale=".1" distorted="false" zorder="0" 	/>			   
		   
	<style name="skin_base" url="vtourskin.png" />

	<style name="map_radar_active" url="custom/vtourskin_radar.png" scale="1.5"   crop="0|0|100|100"  framewidth="100" frameheight="100" frame="0" lastframe="70" onloaded="set(ranimated, 1); radar_animate();"/>

	<style name="skin_mobilethumbtext_style" 	url="%SWFPATH%/plugins/textfield.swf" 	align="leftcenter" width="100%" autoheight="false" autowidth="true" x="130" y="20" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:left; font-size:18px;'" textshadow="get:skin_settings.design_text_shadow" />
	
	<style name="multi_thumb_style" zorder="50" keep="true" depth="800" scale=".1" distorted="false"  alpha="0" width="180" height="180" 	ox="0" oy="0" 
	onover="tween(scale,.6,.1);	 " 
	onout="tween(scale,.5,.2); "    enabled="true" onclick=" if(linkedscene,  activatepano(get(linkedscene));  skin_updatescroll(); );"  />

	<!-- Change the tween rotate from 180 back to 135 to get diagonal -->
	<!-- Set the edge to centertop so that popup images display downwards -->
	<!-- Want popup to have a glow behind it -->
	<!-- TODO: May need to disable click on mobile -->
  <style name="popup" url="vtourskin_hotspot_multi.png" alpha="0" scale="0.5" depth="false"	
  	onover="tween(rotate,90); 
  	set(hotspot[popup-img].ath,get(ath) ); 
  	set(hotspot[popup-img].atv,calc(atv + 3.5)); 
  	set(hotspot[popup-img].url,get(img-url) );  
  	set(hotspot[popup-img].edge, 'centertop');
  	if(webvr.isenabled !== true, 
  		tween(hotspot[popup-img].scale, .5);,
  		tween(hotspot[popup-img].scale, .2);
		);
  	tween(hotspot[popup-img].alpha,1);

  	set(hotspot[hotspot-glow].ath, get(ath));
  	set(hotspot[hotspot-glow].atv, get(atv));
  	set(hotspot[hotspot-glow].url, skin/glow.png);  
  	set(hotspot[hotspot-glow].edge, 'center');
  	if(webvr.isenabled !== true, 
  		tween(hotspot[hotspot-glow].scale, 1);,
  		tween(hotspot[hotspot-glow].scale, .5);
  	);
  	tween(hotspot[hotspot-glow].alpha, 0.5);

  	" 
  	onout="tween(rotate,0); 
  	tween(hotspot[popup-img].scale,0); 
  	tween(hotspot[popup-img].alpha,0);
  	tween(hotspot[hotspot-glow].scale, 0);
  	tween(hotspot[hotspot-glow].alpha, 0);

  	"

    onclick="if(device.touch, if(rotate==90,tween(rotate,0); 
    tween(hotspot[popup-img].alpha,0); 
    tween(hotspot[popup-img].scale,0); , popup-close();  
    tween(rotate,90); 
    set(hotspot[popup-img].ath,get(ath) ); 
    set(hotspot[popup-img].atv,calc(atv + 3.5)); 
    set(hotspot[popup-img].url,get(img-url) );  
    set(hotspot[popup-img].edge, 'centertop');
    set(hotspot[popup-img].scale,0); 
    set(hotspot[popup-img].alpha,0); 
    tween(hotspot[popup-img].scale,.35); 
    tween(hotspot[popup-img].alpha,1); ); );"
	
		onloaded="delayedcall(get(skin_settings.hs_anim_delay),tween(alpha,1,1,linear,set(enabled,true);); ); "

	/>	
	
 	<style name="normal" alpha="0" onloaded="delayedcall(get(skin_settings.hs_anim_delay),tween(alpha,1,1,linear););" zorder="-1" depth="off" polyline="false" scaleflying="true" enabled="false" />	
	 
	 <!-- Changed depth from 1000 to 100 -->
	 <style name="popup-text" edge="centerbottom" scale="0" 	keep="true"		 oy="-20" visible="true" distorted="false" alpha="1"	         enabled="true" zorder="100"	        depth="off"	         polyline="false"	         scaleflying="false"	        tx="0"	         ty="0"	         tz="0"	        onclickx="if(webvr.isenabled !== true, tween(flying,0); tween(alpha,0); tween(oy,0 ); tween(scale,0 ); set(enabled,false);  ); set(first-view, get(view.fov) ); add(sec-view, -10,  get(first-view)); tween(view.fov,get(sec-view)); tween(hotspot[window-tint-hs].alpha,0 );  "	/>	

	<hotspot name="popup-img" ath="0" atv="0" style="popup-text" url="" enabled="false" />

	<hotspot name="hotspot-glow" ath="0" atv="0" url="" enabled="false"/>

	<action name="popup-close" >
		tween(hotspot[pop01].rotate,0); 
		tween(hotspot[pop02].rotate,0);
		tween(hotspot[pop03].rotate,0);
		tween(hotspot[pop04].rotate,0);
		tween(hotspot[pop05].rotate,0);
		tween(hotspot[pop06].rotate,0);
		tween(hotspot[pop07].rotate,0);
		tween(hotspot[pop08].rotate,0);
		tween(hotspot[pop09].rotate,0);
		tween(hotspot[pop10].rotate,0);
		tween(hotspot[pop11].rotate,0);
		tween(hotspot[pop12].rotate,0);
		tween(hotspot[pop13].rotate,0);
		tween(hotspot[pop14].rotate,0);
		tween(hotspot[pop15].rotate,0);
	</action>
 
 <!-- custom Layout -->
 	<layer name="tooltip_hs" keep="true"  url="%SWFPATH%/plugins/textfield.swf" visible="true" alpha="1" enabled="false" align="topleft" edge="center" oy="-90" autoheight="true" autowidth="true"	       background="false" backgroundcolor="0x000000" backgroundalpha="0.5" padding="5 10 5 10" 	       border="fasle" bordercolor="0xffffff" borderalpha="1.0" borderwidth="3.0" roundedge="0" 	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"	       css="text-align:center; color:#ffffff; font-family:Arial; font-weight:normal; font-size:20px;" html="Tooltip Headline"	       y="0" x="0" 		   	/>
	
<layer name="intro-con" keep="true" visible="true" type="container" x="0" y="0" align="lefttop" width="100%" height="100%" autoalpha="true" alpha="1" scalechildren="true"  preload="true"  >


	<layer name="flash-intro" type="container" keep="true" visible="true" align="center"  	   width="100%" height="100%" zorder="50"  scalechildren="true"	 >

	</layer>

	<layer name="html-windowtint" type="container" keep="true" visible="get:skin_settings.start_screen" align="centertop" x="0" y="0" scale="1" width="1000%" height="1000%" bgcolor="0X000000" bgalpha="1" scalechildren="true" alpha="1" zorder="1" >
	</layer>	

</layer> 

<action name="choose" >

loadscene(get(scene[0].name),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); 
 

</action>

 
	<layer name="main-skin-con" type="container" keep="true" visible="false"  align="lefttop" width="100%" y="0" height="100%" autoalpha="true" alpha="0" zorder="50" >
		<layer name="grad-con" type="container" keep="true" url="img/gradient.png" visible="true" align="leftbottom" width="100%" x="0" y="0" height="100" enabled="false" alpha=".5" zorder="-1"  ></layer>

		<layer name="html-skin_title" visible="true" url="%SWFPATH%/plugins/textfield.swf" keep="true" align="righttop" edge="" width="95%" height="32" autoheight="true" x="12" y="8" zorder="4" enabled="false" alpha="1" background="false" border="false" roundedge="0" 	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"	       css="text-align:right; color:#ffffff; font-family:Arial; font-weight:normal; font-size:18px;" css.mobile="text-align:right; color:#ffffff; font-family:Arial; font-weight:normal; font-size:18px;"     	   	/>
		
		<layer name="skin_np_title" visible="true"  url="%SWFPATH%/plugins/textfield.swf" keep="true" align="center" edge="" width="95%" height="32" autoheight="true"  zorder="4" enabled="false" alpha="1" background="false" border="false" roundedge="0" 	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"	       css="text-align:center; color:#ffffff; font-family:Arial; font-weight:normal; font-size:20px;" 		   	/>
		
		<layer name="html-skin_btn_vr"        style="skin_base|skin_glow" crop="0|0|80|64"    align="rightbottom"     x="get:skin_settings.vr-icon-xoffset"   y="30"  scale="0.56"  visible="true" devices="webgl|mobile" onclick="webvr.enterVR();" />	

		<layer name="philly_by_drone_logo"        style="skin_base|skin_glow" url="img/philly-by-drone-logo.png"    align="rightbottom"     x="0"   y="10"  scale="0.2"  visible="true" devices="webgl|mobile" onclick="openurl(http://www.phillybydrone.com,_blank);" />	

		<!-- Left and right buttons now navigate to the left and right -->
		<layer	name="prev_button_s" keep="true"  style="skin_glow"	url="img/arrows.png"  align="left"  scale="0.5" scale.mobile="0.3" visible="get:skin_settings.arrows_html" autoalpha="false" alpha="1"
				crop="0|120|85|120" ondown2="set(hlookat_moveforce,-1);" onup2=" set(hlookat_moveforce,0); " />
				
		<layer	name="next_button_s"  keep="true"  style="skin_glow" 	url="img/arrows.png"   align="right"  scale="0.5" scale.mobile="0.3" visible="get:skin_settings.arrows_html" autoalpha="false" alpha="1" 
				crop="0|0|85|120"  ondown2="set(hlookat_moveforce,1);" onup2=" set(hlookat_moveforce,0); " />
		
		<layer name="flash-skin-con" type="container" keep="true" visible="true" align="lefttop" width="100%" y="0" height="100%" autoalpha="true" alpha="0" >

			<layer name="flash-nav-bar-con" type="container" align="rightbottom" x="0" onloaded="if(device.mobile, if(layer[html-menu-mobile].visible,set(x,get(skin_settings.navxoffset));,set(x,0);); , if(layer[html-menu-desktop].visible,set(x,get(skin_settings.navxoffset));,set(x,0);););"  y="10" ox="-55" keep="true" width="100%" height="100" maskchildren="false" >			
						<layer name="flash-skin_btn_share"     style="skin_base|skin_glow" crop="0|320|64|64"   align="rightbottom"       x="-45"    y="-2"  scale="0.58" active="1" visible="false"  />				
						<layer name="flash-control-bar" type="container" align="rightbottom" x="0" y="0" keep="true" width="100%" height="100" autoalpha="true" alpha="1" >			
						</layer>
			</layer>	
		</layer>

		<layer name="html-skin-con" type="container" keep="true" visible="true" align="lefttop" width="100%" height="100%"   autoalpha="true" alpha="1" >
			<layer name="html-nav-bar-con" type="container" align="rightbottom" x="0" onloaded="if(device.mobile, if(layer[html-menu-mobile].visible,set(x,get(skin_settings.navxoffset));,set(x,0);); , if(layer[html-menu-desktop].visible,set(x,get(skin_settings.navxoffset));,set(x,0);););"  y="10" ox="-55" keep="true" width="100%" height="100" maskchildren="false" >	
			
						<layer name="html-control-bar" type="container" align="rightbottom" x="0" y="0"  keep="true" width="100%" height="100" autoalpha="true" alpha="1"   onloaded="if(layer[html-skin_btn_share].visible, set(x,0); , set(x,-45) );" >
						
							<layer name="html-skin_btn_fs2"        style="skin_base|skin_glow" crop="0|576|64|64"   align="rightbottom"       x="get:skin_settings.fs-icon-xoffset" x.mobile="0" x.tablet="0"  y="20"  scale="0.56" onclick="switch(fullscreen);" onover2="set(layer[skin_tp_fs].visible,true);" onout2="set(layer[skin_tp_fs].visible,false);" devices="fullscreensupport" />											
						</layer>
			</layer>	
		</layer>
	</layer>  		   
  
<layer name="mobile-thumbs-con" type="container" active="0" keep="true" alpha="0"  visible="false" align="lefttop" x="0" y="0" width="100%" height="100%" bgcolor="0x000000" bgalpha="0" zorder="60" >
	<layer name="mobilethumbs-con" keep="true" type="container" align="lefttop" width="600" height="95%" bgcolor="0x000000" bgalpha="0">
		<layer name="skin_mobilethumb" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" align="lefttop" x="10"  width="500" height="3000" direction="v" onloaded="setcenter(0,0);">
			<layer name="mobile-header-bg" type="container" keep="true" visible="true" align="topcenter" width="100%" height="75" x="-10" y="0" bgcolor="0x202020" bgalpha="1" >
				<layer name="mobile-header" url="img/corp-logo.png" align="topcenter" x="0" y="0" scale="1.0" />

			</layer>

		</layer>
	</layer>
</layer>

<layer name="mobile-back-bg" type="container"  keep="true" alpha="1"  visible="false" align="lefttop" x="0" y="0" width="100%" height="100%" bgcolor="0x000000" bgalpha=".85" zorder="2" />

<action name="hs_create">
		
		for(set(i,0), i LT scene.count, inc(i),


		add(j, get(i),1); txtadd(nr_hs,'spot_anim_',get(i));	 txtadd(mnr_hs,'mspot_anim_',get(j));		
		txtadd(hs_name,'spot',get(j));                           txtadd(mhs_name,'mspot',get(j));
		addhotspot(get(nr_hs));	                                 addhotspot(get(mnr_hs));	

		copy(hotspot[get(nr_hs)].ath,hotspot[get(hs_name)].ath); copy(hotspot[get(mnr_hs)].ath,hotspot[get(mhs_name)].ath);	
		copy(hotspot[get(nr_hs)].atv,hotspot[get(hs_name)].atv); copy(hotspot[get(mnr_hs)].atv,hotspot[get(mhs_name)].atv);	
		hotspot[get(nr_hs)].loadstyle(skin_hotspot_anim);        hotspot[get(mnr_hs)].loadstyle(skin_hotspot_anim);
		copy(hotspot[get(nr_hs)].keep,false);	                 copy(hotspot[get(mnr_hs)].keep,false);

		
		txtadd(rnd_hs,'spot_back_',get(i));					
		addhotspot(get(rnd_hs));
		copy(hotspot[get(rnd_hs)].ath,hotspot[get(hs_name)].ath);	
		copy(hotspot[get(rnd_hs)].atv,hotspot[get(hs_name)].atv);
		set(hotspot[get(rnd_hs)].url, get(scene[get(i)].thumburl));		
		hotspot[get(rnd_hs)].loadstyle(skin_hotspot_round);		


		);	
</action>	


<action name="skin_startup_custom">

set(layer[thumbs_button].visible,false);
set(layer[thumbs_button].alpha,0);
set(layer[thumbs_button].scale,.62);
set(layer[thumbs_button].y,14);
set(layer[skin_map].zoom,get(skin_settings.maps_zoom));

set(layer[skin_scroll_window].visible,false );
set(layer[skin_control_bar].visible,false );
set(layer[skin_splitter_bottom].visible,false );
	
	if(skin_settings.gyro AND !device.desktop AND device.html5,
		copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
	  );

	if(skin_settings.webvr AND device.html5 AND device.webgl,
		copy(plugin[WebVR].url, plugin[WebVR].pluginurl);
	  );

	skin_setup();

	hs_create();	
			
			
</action>

<action name="new_scene_update">

	set(hotspot[popup-img].enabled, false);
	set(hotspot[popup-img].alpha, 0);

	set(hotspot[hotspot-glow].enabled, false);
	set(hotspot[hotspot-glow].alpha, 0);

	if(skin_settings.title,
		copy(layer[html-skin_title].html, scene[get(xml.scene)].title );
	);
	tween(layer[skin_np_title].alpha,0,.5);
			
	tween(layer[skin_np_title].alpha,0);
	set(layer[tooltip_hs].alpha,0);
	 
	if(device.mobile,	
		set(layer[mobile-thumbs-con].active,1);
	, 
	
	
	set(layer[main-logo].visible,get(skin_settings.project_logo)); 
	set(layer[html-skin_title].alpha,1);
	set(layer[flash-skin-con].alpha,1);
	set(layer[html-skin-con].alpha,1);
	responsive_interface();
	tween(layer[skin_btn_vr].alpha,1,.5,default,set(layer[skin_btn_vr].enabled,true););
	tween(layer[skin_btn_zin].alpha,1,.5,default,set(layer[skin_btn_zin].enabled,true);); 
	tween(layer[skin_btn_zout].alpha,1,.5,default,set(layer[skin_btn_zout].enabled,true);); 
	tween(layer[skin_btn_fs].alpha,1,.5,default,set(layer[skin_btn_fs].enabled,true);); 
	set(layer[prev_button_s].x,0);
	set(layer[next_button_s].x,0);


	);
	
		txtadd(rdname,'rd',get(scene[get(xml.scene)].radar));
for(set(i,0), i LT scene.count, inc(i),
			txtadd(rd_name, 'rd', get(i));
			set(layer[get(rd_name)].scale,.35);

);
set(layer[get(rdname)].scale,.7);
set(layer[rdactive].x,get(layer[get(rdname)].x));
set(layer[rdactive].y,get(layer[get(rdname)].y));

if(device.mobile OR device.tablet,
	if(skin_settings.gyro, set(layer[skin_btn_gyrox].visible, true);
	,
	set(layer[skin_btn_gyrox].visible, false)
  ); 
  ,
	set(layer[skin_btn_gyrox].visible, false)
  ); 
</action>	


<action name="skin_hotspotstyle_clicked">
	if(linkedscene,
		if(linkedscene_lookat,
			txtsplit(linkedscene_lookat, ',', hs_lookat_h, hs_lookat_v, hs_lookat_fov);
		  );
		set(enabled, false);
		skin_hidetooltips();
		tween(alpha|oy|rx,0.0|0|0, 0.5, default,
			skin_loadscene(get(linkedscene), get(skin_settings.loadscene_blend));
			if(hs_lookat_h !== null,
				skin_lookat(get(hs_lookat_h), get(hs_lookat_v), get(hs_lookat_fov));
				delete(hs_lookat_h, hs_lookat_v, hs_lookat_fov);
			  );
			skin_updatescroll();
		  );
	  );
</action>


<action name="hotspot_animate">		
	 inc(frame,1,get(lastframe),0);		
	 mul(ypos,frame,frameheight);		
	 txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
	 delayedcall(0.03, if(animated == 1, hotspot_animate(); ); );	
</action>	

<action name="showscenename">	
	copy(cursceneindex, scene[get(xml.scene)].index);
	set(nextindex,%1);
	add(nextindex,%1, cursceneindex);
	if(nextindex LT 0,
	add(nextindex, scene.count);
	);
	if(nextindex === scene.count,
	set(nextindex, 0);
	);
	tween(layer[skin_np_title].alpha,1);
	copy(layer[skin_np_title].html, scene[get(nextindex)].title );		
</action>

	<action name="skin_showmap_custom">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );

		if(show,
			add(maph, area.pixelheight, 200);
			
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0);
			tween(layer[skin_map].height, get(maph));
			set(layer[skin_map].state, 'opened');
			
		  ,
		  	if(layer[skin_map].state != 'closed',
			set(layer[skin_map].state, 'closed');
			tween(layer[skin_map].height, 0);
			tween(layer[skin_map].alpha, 1);
			set(layer[skin_map].visible,true) 

			);
		  );
	</action>
	
	
	
<action	name="responsive_interface" >
if(device.flash,
	if((stageheight LT 450) OR (stagewidth LT 850),
	
	set(layer[html-share-bar].visible,false);
		set(layer[flash-skin-con].alpha,1);
		set(layer[html-skin-con].alpha,0);
		tween(layer[main-logo].scale,.15);	
		set(layer[html-share-bar].visible,false);
		
		set(layer[flash-skin_btn_zout].x,-4);
		set(layer[flash-skin_btn_zin].x,39);	
		,
		
		set(layer[flash-skin_btn_zout].x,44);
		set(layer[flash-skin_btn_zin].x,87);
		set(layer[html-share-bar].visible,true);		
		set(layer[html-share-bar].visible,true);
		set(layer[flash-skin-con].alpha,0);
		set(layer[html-skin-con].alpha,1);	
		tween(layer[main-logo].scale,.25);			
	tween(layer[prev_button_s].alpha,0); 
	tween(layer[next_button_s].alpha,0); 

	);


	);

	
	
if(device.html5,
	if((stageheight LT 450) OR (stagewidth LT 850),
	
	set(layer[html-share-bar].visible,true);
		set(layer[flash-skin-con].alpha,0);
		set(layer[html-skin-con].alpha,1);
		tween(layer[main-logo].scale,.15);	
if(device.mobile,
		set(layer[html-share-bar].visible,true);
		
		set(layer[html-skin_btn_zout].x,-4);
		set(layer[html-skin_btn_zin].x,39);
		set(layer[html-skin_btn_fs].x,45);	
		
		,

		set(layer[html-share-bar].visible,false);
	
		set(layer[html-skin_btn_zout].x,-4);
		set(layer[html-skin_btn_zin].x,39);
		set(layer[html-skin_btn_fs].x,-45);	


);		
		

	if(scene[get(xml.scene)].index LT 1,
	tween(layer[prev_button_s].alpha,1); 	
	tween(layer[next_button_s].alpha,1); 

	,
	
	tween(layer[prev_button_s].alpha,1); 
	tween(layer[next_button_s].alpha,1); 

	);

	if(scene[get(xml.scene)].index GT lastscene ,
	tween(layer[prev_button_s].alpha,1); 
	tween(layer[next_button_s].alpha,1); 


	);	
	
		,
		set(layer[html-skin_btn_fs].x,0);		
		set(layer[html-skin_btn_zout].x,44);
		set(layer[html-skin_btn_zin].x,87);
		set(layer[html-share-bar].visible,true);		

		set(layer[flash-skin-con].alpha,0);
		set(layer[html-skin-con].alpha,1);	
		tween(layer[main-logo].scale,.25);				
	);
	);
	</action>

	<action name="calc_layer_pos">	
	asyncloop(hovering,	spheretoscreen(hotspot[%1].ath,hotspot[%1].atv,x,y);
	copy(layer[tooltip_hs].x,x);		copy(layer[tooltip_hs].y,y); );		
	</action>	
	
	<action name="calc_layer_pos_multi">	
	asyncloop(hovering,	spheretoscreen(hotspot[%1].ath,hotspot[%1].atv,x,y);
	add(x,hotspot[%1].ox); add(y,hotspot[%1].oy);
	copy(layer[tooltip_hs].x,x);		copy(layer[tooltip_hs].y,y); );		
	</action>


	<action name="hs-anim">
	tween(hotspot[get(name)].alpha,0,1.5,easeOutQuad,tween(hotspot[get(name)].alpha,1,.01,easeOut,   ); );
	tween(hotspot[get(name)].height,100,1.5,easeOutQuad,tween(hotspot[get(name)].height,40,.01,easeOut,   ); );
	tween(hotspot[get(name)].width,100,1.5,easeOutQuad,tween(hotspot[get(name)].width,40,.01,easeOut, hs-anim();  ); );
	</action>
	
	
</krpano>
